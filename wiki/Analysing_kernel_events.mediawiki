__TOC__
This page describes how to view and analyse kernel events.

The tool you will need is '''evtest'''. If it is not available in your
distribution, grab it from [http://cgit.freedesktop.org/evtest/ here]

'''Note: this will not work while the wacom X driver is running. You need to disable the driver.''' See [[#Disabling the X driver|Disabling the X driver]]

= Detecting your Wacom device =
Plug the device in and have a look at ''/proc/bus/input/devices''. You'll find something like this:

<pre>
I: Bus=0003 Vendor=056a Product=00b9 Version=0104
N: Name="Wacom Intuos4 6x9"
P: Phys=
S: Sysfs=/devices/pci0000:00/0000:00:1d.0/usb5/5-2/5-2:1.0/input/input33
U: Uniq=
H: Handlers=mouse3 event11 
B: EV=1f
B: KEY=1cff 1f01ff 0 0 0 0
B: REL=100
B: ABS=1000f000167
B: MSC=1
</pre>

The interesting line here is:
  H: Handlers=mouse3 event11 

This means that the Wacom device is available as ''/dev/input/event11''. In
this page, we'll always use this device path as example.

= Running evtest =
You must run evtest as root (or through sudo):
  sudo evtest /dev/input/event11

This will print out two parts. First the device information and then - as they come in - events generated by the device:

== Device information ==
The output below is shortened for brevity.
<pre>
:: whot@barra:~> sudo evtest /dev/input/event11 
Input driver version is 1.0.0
Input device ID: bus 0x3 vendor 0x56a product 0xb9 version 0x104
Input device name: "Wacom Intuos4 6x9"
Supported events:
  Event type 0 (Sync)
  Event type 1 (Key)
    Event code 256 (Btn0)
    Event code 257 (Btn1)

[...]

  Event type 2 (Relative)
    Event code 8 (Wheel)
  Event type 3 (Absolute)
    Event code 0 (X)
      Value      0
      Min        0
      Max    44704
      Fuzz       4
    Event code 1 (Y)
      Value      0
      Min        0
      Max    27940
      Fuzz       4
    Event code 2 (Z)
      Value      0
      Min     -900
      Max      899

[...]

Testing ... (interrupt to exit)
</pre>

The device information contains the device name, various IDs and the events supported by this device. e.g. in the output above, we can see the tablet has a Button 0, Button 1, a relative wheel axis, and absolute x/y/z axes (plus more, the output was shortened). The X driver uses this information to set up the device correctly.

== Event stream ==
To see events, you need to tap the tablet with the pen or any other tool. An example event stream from evtest looks like this:
<pre>
Event: time 1296609871.898669, type 3 (Absolute), code 0 (X), value 33213
Event: time 1296609871.898679, type 3 (Absolute), code 1 (Y), value 20076
Event: time 1296609871.898683, type 3 (Absolute), code 25 (Distance), value 22
Event: time 1296609871.898688, type 3 (Absolute), code 26 (XTilt), value 58
Event: time 1296609871.898691, type 3 (Absolute), code 27 (YTilt), value 56
Event: time 1296609871.898697, type 3 (Absolute), code 40 (Misc), value 1050626
Event: time 1296609871.898700, type 1 (Key), code 320 (ToolPen), value 1
Event: time 1296609871.898703, type 4 (Misc), code 0 (Serial), value 92276562
Event: time 1296609871.898707, -------------- Report Sync ------------
Event: time 1296609871.902644, type 3 (Absolute), code 0 (X), value 33356
Event: time 1296609871.902654, type 3 (Absolute), code 1 (Y), value 20158
Event: time 1296609871.902657, type 3 (Absolute), code 25 (Distance), value 25
Event: time 1296609871.902661, type 3 (Absolute), code 24 (Pressure), value 826
Event: time 1296609871.902667, type 1 (Key), code 330 (Touch), value 1
Event: time 1296609871.902673, type 4 (Misc), code 0 (Serial), value 92276562
Event: time 1296609871.902676, -------------- Report Sync ------------
Event: time 1296609871.906672, type 3 (Absolute), code 0 (X), value 33470
Event: time 1296609871.906681, type 3 (Absolute), code 1 (Y), value 20218
Event: time 1296609871.906685, type 3 (Absolute), code 25 (Distance), value 24
Event: time 1296609871.906688, type 3 (Absolute), code 24 (Pressure), value 1014
Event: time 1296609871.906699, type 4 (Misc), code 0 (Serial), value 92276562
Event: time 1296609871.906702, -------------- Report Sync ------------
</pre>

''Report Sync'' divides the different hardware events. i.e in the above output, you can see three event frames. The events themselves update various axes (x, y, distance, etc.).
The output itself is mostly self-explanatory.

If you don't see any events, the most common cause is that you forgot to [[#Disabling the X driver|disable the X driver]]. If you are sure you have done so, the kernel driver does not work with your model. You need to [[Submitting Bugs|submit a bug]].

= Disabling the X driver =
The wacom X driver puts an ''EVIOCGRAB'' on the device file when the device is enabled. Once the grab is established, only a single process (the X server) will receive events from that device. Thus, if you run evtest from within X, you will only see the device information, but no events.

There are several ways to get around this:
* VT switch away by pressing Ctrl+Alt+F1. This puts you on a TTY where you can log in and run evtest from. To get back to X, press Ctrl+Alt+F7. Note that distributions use TTYs differently, so you may have to cycle through the various Fx keys to find the right ones. This is the recommended method. It is fast and does not destroy your session.
* Disable the device in X by running ''xinput set-prop "device name" "Device Enabled" 0''. Note that you need to do this for all tools (stylus, eraser, etc.).
* Stop X. Usually this can be achieved by switching into runlevel 3 with ''sudo init 3''. Note that this will close your session.


[[Category:DeveloperPages]]