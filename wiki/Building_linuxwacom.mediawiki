'''Note: this is a guide for building [[linuxwacom]] and does not apply to [[xf86-input-wacom]].'''

This section is devoted to preparing your system for the installation. Every distribution handles kernel modules and file locations a bit differently, so the goal here is to return everything to a known state.

USB users will need to pay specific attention to discussions related to kernel drivers and modules. Serial tablet users have it much easier, and can bypass this. Both users will need to make changes to the XFree86/Xorg configuration file.

== Before We Start ==

From the beginning, let's make certain that we are on the same page. First, if you have Wacom related lines in your XF86Config/XF86Config-4 or xorg.conf files already, you should comment them out or remove them. In particular, this includes InputDevice sections with a driver set to "wacom" and their corresponding InputDevice lines in ServerLayout. When that's done, restart X.

It would be a wise idea at this time to check your XFree86 or Xorg log file for references to wacom, wcm, or tablet. If X persists in trying to interact with the tablet, things will only be problematic later. The log file is often found at /var/log/XFree86.0.log or /var/log/Xorg.0.log.

To be prepared for the coming steps, it would be nice if you know what X server and Linux kernel versions are running on your system. The X -version command reveals those information for you.

If you have a USB tablet, you need to check Wacom kernel drvier first The USB Kernel Driver. Serial tablet or Tablet PC users can go directly to the next section Downloading the Code page.
== Downloading the Code ==

The file linuxwacom-0.8.6-1.tar.bz2 is the stable package and contains files that you will need to get your serial or USB tablet working. The current beta package linuxwacom-0.8.5-12.tar.bz2 is also available and may be used by people who are willing to help test new features. I will never put a beta package on this site that I am not running myself on my primary development machine. So you can be certain that if there are any obvious show stoppers, they will be fixed before you get to see them.

Unpacking the tarball is usually a one-step process, but I show both steps in case the typical -jxf option doesn't work with tar.

<pre>
    [jej@ayukawa jej]$ bunzip2 linuxwacom-0.8.6-1.tar.bz2
    [jej@ayukawa jej]$ tar -xf linuxwacom-0.8.6-1.tar
    [jej@ayukawa jej]$ cd linuxwacom-0.8.6-1
</pre>

Once in the package directory, you need only to configure and build the code. This is described in more detail as you continue. The executables and wacom_drv.o are installed automatically; the kernel drivers have different installation procedures depend on the kernel source you use.

== The Root Account ==

If you are comfortable with the root account, paths, the /sbin directory, and programs like modprobe, you can skip this section. This is largely to clarify some things for people who are new to Linux and get tripped up with the root account and paths. This is not meant to be a tutorial, so if this is over your head, I would recommend reading a book on Linux command line usage. All examples in this document assume the bash shell.

Many of the procedures in this document need root access, and the commands that are executed are located in places on the system that are not normally accessed by typical users. In order to run the modprobe command, for instance, you must have root access. Additionally, if the /sbin directory which contains modprobe does not appear in your path, you must specify the full pathname, /sbin/modprobe, to run the command. Here is an example of the problem, followed by solutions.

<pre>
    [jej@ayukawa jej]$ modprobe foo
    bash: modprobe: command not found
    [jej@ayukawa jej]$ locate modprobe
    /sbin/modprobe
    [jej@ayukawa jej]$ echo $PATH
    /bin:/usr/bin: ... :/home/jej/bin
</pre>

Normal users do not have /sbin in their path, so running modprobe directly fails. Running the program using the full pathname (/sbin/modprobe) will solve this, as will adding /sbin to the path. But there is another problem, as we will see:

<pre>
    [jej@ayukawa jej]$ /sbin/modprobe foo
    foo.o: create_module: Operation not permitted
</pre>

Normal users are not allowed to run this command. For that, we need to be root. The su command stands for "substitute user" since it can be used to become any user on the system, but it is generally known by the incorrect but very memorable mnemonic "superuser."

<pre>
    [jej@ayukawa jej]$ su
    Password:
    [root@ayukawa jej]# whoami
    root
</pre>

Note the change to the root account, and the additional change from $ to # on the prompt. I maintain this convention in all the examples in this document, so if you get an "access denied" error, check the prompt. You probably need to be root.

Now that we have root access, is /sbin in our path? No. We have only been granted the privileges of root; we are not really in the root account's environment. Most notably, the home directory ($HOME) changes, but the path ($PATH) stays the same. Thus, becoming root is not sufficient to run modprobe without the full pathname, but does solve the access problem.

<pre>
    [root@ayukawa jej]# modprobe foo
    bash: modprobe: command not found
    [root@ayukawa jej]# export PATH=$PATH:/sbin
    [root@ayukawa jej]# modprobe foo
    [root@ayukawa jej]#
</pre>

In this example, the user adds the /sbin directory to the path and can run modprobe normally. export is a bash shell command that changes aspects of your environment; in this case, /sbin is appended to the path. In the highly unlikely event that you are using a different shell, which for novice users seems unwise to me, you would need to use a different command. Redhat, Mandrake, and similar distributions all use bash by default, so it is unlikely that you would be using anything else.

At any rate, changing the path is a reasonably good solution, if you can remember the syntax of the export command.

Another approach to this problem is to do more than just "be root," but to run in the root account's environment. This is accomplished with the "su -" command and provides you with root's normal path, including the /sbin directory. The unfortunate side-effect is that you wind up in root's home directory, requiring you to cd back to the original directory in which you were working.

<pre>
    [jej@ayukawa src]$ pwd
    /home/jej/src/linuxwacom/src
    [jej@ayukawa src]$ su -
    [root@ayukawa root]# cd /home/jej/src/linuxwacom/src
    [root@ayukawa src]# echo $PATH
    /bin:/sbin:/usr/bin: ... :/root/bin
</pre>

Here, the user starts in the package's src directory, but upon invoking "su -" is magically shuttled off to root's home directory. A quick cd back to the package directory and all is better. And, as demonstrated above, the path conveniently contains /sbin.

So that leaves you with two immediate options, and one potential long-term option:

Option One: Become root and add /sbin to the path.

<pre>
    [jej@ayukawa src]$ su
    [jej@ayukawa src]# export PATH=$PATH:/sbin
</pre>

Option Two: Become root using root's environment and cd back.

<pre>
    [jej@ayukawa src]$ su -
    [root@ayukawa root]# cd /home/jej/src/linuxwacom/src
</pre>


Option Three (recommended): Add /sbin to your personal account's path

<pre>
    [jej@ayukawa src]$ export PATH=$PATH:/sbin
    [jej@ayukawa src]$ su
    [root@ayukawa src]# echo $PATH
    /bin:/usr/bin: ... :/home/jej/bin:/sbin
</pre>

By adding the path early in the session, it becomes available every time you su to root later on. You could also add the export command to the .bash_profile file in your home directory and have the path set automatically when you log in.

To exit from the root account and return to your normal account, you can use the exit command or type Ctrl-D on an empty line.

<pre>
    [root@ayukawa src]# exit
    [jej@ayukawa src]$
</pre>

If any of this is not explained clearly, drop me a line and let me know where you got stuck. I'd be happy to clarify directly and update this page for future readers.

== Install from Prebuilt ==

We have created 2 sets of prebuilt Wacom X driver and its utility programs under linuxwacom-0.8.6-1/prebuilt; one for x86-32 systems, the other for x86-64 systems.

If you don't plan to change anything in the driver, following steps will install the prebuilt files for you:

Note: Please remove the existing linuxwacom package if your distro has installed one for you. Use the command, such as yum remove or apt-get uninstall, provided by your distro. Please DO NOT remove the driver files manually by rm.

<pre>
    [jej@ayukawa jej]$ cd linuxwacom-0.8.6-1/prebuilt
    [jej@ayukawa prebuilt]$ su
    [jej@ayukawa prebuilt]# ./uninstall
    [jej@ayukawa prebuilt]# ./install
</pre>

Serial tablet (most Tablet PCs are serial) users can skip the rest sections and go to Viewing Wacom Data (wacdump) page for details on viewing the tablet output now.

If you use an older USB tablet and your running kernel was released 6 months later than your tablet was first seen in market, you most probably can skip next section of this chapter and the whole chapter 4 too. If you would like to make certain, continue to next section.

Note:If the prebuilt driver doesn't work for you, you would probably end up building your own driver in the following sections. Kory Prince has provided a Python script, getwacom.py, to download, compile, and install the latest linuxwacom release. Please try Kory's script if you like to take a shortcut to install the driver.
== Configuring the Package ==

This section describes how to configure the package. You can run the configure script now as the samples below demonstrate, or later when you reach the section of the document that explains what specifically needs to be configured and why. This page is provided largely as a reference.

By default, xidump, wacdump, xsetwacom, wacom_drv.o, and wacomcpl are built. Additional options include replacement of kernel drivers for hid, mousedev, evdev, and usbmouse as well as building the XFree86/Xorg driver from scratch. Lastly, remember that for every --enable option, there is also an equivalent --disable option.

The configuration options are listed on this page. You can also see the online list by issuing ./configure -help under linuxwacom's base directory.

Note: You should remove the existing linuxwacom package on your system before installing the drivers and utilities from this project.
Building Kernel Modules - USB Only

In order to build kernel modules, you will need the kernel source installed on your system. If you are running on Redhat or Mandrake, you can get it by installing the kernel-source RPM.

The kernel source directory is assumed to be in /usr/src/linux, /usr/src/linux-2.6, /usr/src/linux-`uname -r`, or /lib/modules/`uname -r`/source. If your kernel sources are elsewhere, you will need to specify the directory with the --with-kernel option described below.

For older 2.6 kernels, you need to configure the kernel modules (wacom and hid) under your kernel source directory before configuring linuxwacom.

Note, for kernel 2.6.18 and later, no need to build hid any more. Refer to Testing Tablet Detection to see if you need to build hid or not.
Module Versioning - USB Only

The script attempts to discover if the kernel is using module versioning by detecting the presence of version numbers in the hid.o module of the currently active kernel. Recent package versions also check for hid.o.gz which exist on Mandrake systems. The configure script may not be able to determine if kernel module versioning should be enabled or not, in which case it will say "unknown, assuming no."

If module versioning is disabled when it should be enabled, depmod will complain about missing symbols but otherwise, things will probably work fine. If it is enabled when it should be disabled, the code may not compile, and it almost certainly will not load properly. If the configure script fails to determine the correct value, the default action of disabling module versioning is the better choice, and you can allows enable it manually and rebuild if depmod complains.
The XFree86/Xorg XInput Driver - USB and Serial

Generally, you will not need to build wacom_drv.o since it ships in binary form in the prebuilt directory. There are prebuilt binaries for XFree86 and Xorg corresponding to x86 and x86-64 systems, respectively. If no one works for you, building from source may be your only option. See the Building wacom_drv.o from Scratch page for more information.
Library Dependencies - ncurses and XLib

Various utilities in the linuxwacom package require not only specific libraries, but their development header files as well. The ncurses package is one such example. Most distributions install the ncurses libraries by default, but the header files are often located in a separate package. You will need both. On Redhat 8.0, they can be found in the ncurses-devel RPM.

Similarly, if you wish to test your tablet using xidump to view XFree86/Xorg input events, you will need the XFree86/Xorg development headers. On Redhat/Fedore Core, they are contained in the XFree86-devel/xorg-sdk package.

If any packages are missing, the configuration will warn you and disable building any programs that depend on them.
Processor Type

The processor type is determined by the script and used to build the kernel modules. If it guesses incorrectly, or you would prefer a different setting, use the --with-arch option described below.



[[Category:linuxwacom]]